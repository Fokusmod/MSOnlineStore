/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.geekbrains.api;

import com.geekbrains.model.Error;
import com.geekbrains.model.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-04T04:25:54.001546200+03:00[Europe/Moscow]")
@Validated
@Tag(name = "products", description = "Everything about your products")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * GET /products : getting All Products
     *
     * @param page page number (optional, default to 1)
     * @param pageSize Products in one page (optional, default to 20)
     * @return A paged array of orders (status code 200)
     *         or unexpected error (status code 200)
     */
    @Operation(
        operationId = "findAllProducts",
        summary = "getting All Products",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "A paged array of orders", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "200", description = "unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Product>> findAllProducts(
        @Parameter(name = "page", description = "page number") @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "pageSize", description = "Products in one page") @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "20") Integer pageSize
    ) {
        return getDelegate().findAllProducts(page, pageSize);
    }

}
